[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Juha Päällysaho Portfolio",
    "section": "",
    "text": "Non classified topics about analytics\n\n\n\n\n\n\n\n\n  \n\n\n\n\ndynamic filtering\n\n\n\n\n\n\n\n\n\n\n\n\nJP\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nmoikka sinne!"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "JP\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/dynamic-filtering.html",
    "href": "posts/dynamic-filtering.html",
    "title": "dynamic filtering",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nIn this post how to build iterative sql based on purrr and list. I also show how to use dbplyr to query databases with custom made function.\n\ncars |> \n    as_tibble()\n\n# A tibble: 50 × 2\n   speed  dist\n   <dbl> <dbl>\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# … with 40 more rows"
  }
]