{
  "hash": "2fd79612966e279ad9de77ff52f048a1",
  "result": {
    "markdown": "---\ntitle: \"dynamic filtering\"\nauthor: \"Juha\"\n---\n\n\nData analytics work requires to use SQL, where the work can be for example comparing different table, for example feature engineering. Alrough SQL is easy to pickup and efficient tool.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nIn this post how to build iterative sql based on purrr and list. I also show how to use dbplyr to query databases with custom made function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars |> \n    as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 2\n   speed  dist\n   <dbl> <dbl>\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ℹ 40 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}